from sktest import *
from sktest_helpers import *
import time

ch = create_default_chain(num_nodes=1, num_accounts=1000)
ch.start()

eth = ch.nodes[0].eth

#pragma solidity >=0.4.10 <0.7.0;
#
#
#contract StorageFiller{
#    
#    mapping (bytes32 => bytes32) public store;
#    
#    fallback() external payable {
#        uint n = msg.value;
#        for(uint32 i=0; i<n; ++i){
#            bytes32 v = keccak256(abi.encodePacked(block.number)) ^ keccak256(abi.encodePacked(i)) ^ bytes32(uint256(msg.sender));
#            store[v] = v;
#        }// for
#        
#    }// fallback
#}

#bytecode = "608060405234801561001057600080fd5b50610162806100206000396000f3fe6080604052600436106100225760003560e01c8063654cf88c146100c557610023565b5b600034905060008090505b818163ffffffff1610156100c157600081604051602001808263ffffffff1663ffffffff1660e01b81526004019150506040516020818303038152906040528051906020012043604051602001808281526020019150506040516020818303038152906040528051906020012018905080600080838152602001908152602001600020819055505080600101905061002e565b5050005b3480156100d157600080fd5b506100fe600480360360208110156100e857600080fd5b8101908080359060200190929190505050610114565b6040518082815260200191505060405180910390f35b6000602052806000526040600020600091509050548156fea26469706673582212206ed9022abf7d78f2cb65c1d192422a8be170d1788bd35c79c90c95f5580f7d8964736f6c63430006060033"
bytecode  = "608060405234801561001057600080fd5b50610174806100206000396000f3fe6080604052600436106100225760003560e01c8063654cf88c146100d757610023565b5b600034905060005b818163ffffffff1610156100d35760003373ffffffffffffffffffffffffffffffffffffffff1660001b82604051602001808263ffffffff1660e01b8152600401915050604051602081830303815290604052805190602001204360405160200180828152602001915050604051602081830303815290604052805190602001201818905080600080838152602001908152602001600020819055505080600101905061002b565b5050005b3480156100e357600080fd5b50610110600480360360208110156100fa57600080fd5b8101908080359060200190929190505050610126565b6040518082815260200191505060405180910390f35b6000602052806000526040600020600091509050548156fea2646970667358221220ca08432c2eccf4e3059e379a21b60e52ffa8f1f94b62ace67da0471b2513c91764736f6c634300060c0033"

raw_deploy = ch.transaction_obj(gas=180000, data=bytecode, value=0, to="")
deploy_hash = eth.sendRawTransaction(raw_deploy)
deploy_receipt = None
while not deploy_receipt:
    try:
        deploy_receipt = eth.getTransactionReceipt(deploy_hash)
    except:
        pass
    time.sleep(0.1)

print(str(deploy_receipt))

contractAddress = deploy_receipt["contractAddress"]
print(f"contractAddress={contractAddress}")
code = eth.getCode(contractAddress)
print(f"code={code}")

count = 0
while True:

  ch.eth.pauseConsensus(True)

  for i in range(1000):
    raw_call = ch.transaction_obj(gas=22000 + 10*21000, _from=i, to=contractAddress, value=10)
    call_hash = eth.sendRawTransaction(raw_call)
    call_receipt = None
    print(f"from = {i}")

  ch.eth.pauseConsensus(False)

  # wait only last
  while not call_receipt:
    try:
      call_receipt = eth.getTransactionReceipt(call_hash)
    except:
      pass
    time.sleep(0.1)

  count += 1
  print(f"COUNT = {count} k")
